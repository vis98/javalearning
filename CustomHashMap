// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;

class HelloWorld {
    public static void main(String[] args) {
CustomHashMap<String, Integer> customHashMap = new CustomHashMap<>();
        customHashMap.put("One", 1);
        customHashMap.put("Two", 2);
        customHashMap.put("Three", 3);

        System.out.println("Value for key 'Two': " + customHashMap.get("Two"));
        System.out.println("Value for key 'Four': " + customHashMap.get("Four"));
    }
}

 class CustomHashMap<K, V> {
private static final int DEFAULT_CAPACITY = 16;
    private LinkedList<Entry<K, V>>[] buckets;

    public CustomHashMap() {
        this(DEFAULT_CAPACITY);
    }  
    public CustomHashMap(int capacity) {
        buckets = new LinkedList[capacity];
        for(int i=0;i<capacity;i++){
            buckets[i]=new LinkedList<>();
        }
    } 
    private int hash(K key) {
        return key.hashCode();
    }

    private int getIndex(int hash) {
        return hash % buckets.length;
    }
    
     private static class Entry<K, V> {
        K key;
        V value;

        public Entry(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }
    
    public V get(K key){
        
        int hash=hash(key);
        int index = getIndex(hash);
        LinkedList<Entry<K,V>> bucket=buckets[index];
        for(Entry<K,V> entry: bucket){
            if(entry.key.equals(key)){
                return entry.value;
            }
        }
        return null;
    }
    public void put(K key, V value) {
        if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }

        int hash = hash(key);
        int index = getIndex(hash);

        LinkedList<Entry<K, V>> bucket = buckets[index];

        for (Entry<K, V> entry : bucket) {
            if (entry.key.equals(key)) {
                entry.value = value; // Update value if key already exists
                return;
            }
        }

        bucket.add(new Entry<>(key, value));
    }
}
